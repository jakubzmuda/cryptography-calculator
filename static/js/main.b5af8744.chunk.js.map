{"version":3,"sources":["App.js","index.js"],"names":["App","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","a","b","base","power","modulo","react_default","createElement","className","renderEuclid","renderModularMultiplication","_this2","onChange","event","setState","target","value","renderEuclidTable","_this3","renderModularMultiplicationTable","_this4","rows","calculateExponentiationRows","map","row","renderExponentiationRow","i","length","_this5","calculateEuclidRows","allLegit","renderEuclidRow","key","u","uPrim","v","vPrim","q","r","isLast","x","t","Number","isNaN","firstInteger","secondInteger","Math","max","min","floor","_","last","previousRow","newA","newB","nextRow","push","lsbBinaryPower","decimalToBinary","reverse","newI","dec","asString","toString","asBinary","charAt","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"qRA2OeA,cApOb,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAC1BG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KACRQ,MAAQ,CACXC,EAAG,IACHC,EAAG,IACHC,KAAM,KACNC,MAAO,KACPC,OAAQ,MAPgBZ,wEAY1B,OACEa,EAAAL,EAAAM,cAAA,OAAKC,UAAW,aACdF,EAAAL,EAAAM,cAAA,OAAKC,UAAU,OACZZ,KAAKa,eACLb,KAAKc,uEAMC,IAAAC,EAAAf,KACb,OACEU,EAAAL,EAAAM,cAAA,OAAKC,UAAU,SACbF,EAAAL,EAAAM,cAAA,uCACAD,EAAAL,EAAAM,cAAA,OAAKC,UAAW,UACdF,EAAAL,EAAAM,cAAA,8BACAD,EAAAL,EAAAM,cAAA,SAAOC,UAAW,QAASI,SAAU,SAAAC,GAAK,OAAIF,EAAKG,SAAS,CAAEb,EAAGY,EAAME,OAAOC,SAAUA,MAAOpB,KAAKI,MAAMC,IAC1GK,EAAAL,EAAAM,cAAA,+BACAD,EAAAL,EAAAM,cAAA,SAAOC,UAAW,QAASI,SAAU,SAAAC,GAAK,OAAIF,EAAKG,SAAS,CAAEZ,EAAGW,EAAME,OAAOC,SAAUA,MAAOpB,KAAKI,MAAME,KAE3GN,KAAKqB,2EAKkB,IAAAC,EAAAtB,KAC5B,OACEU,EAAAL,EAAAM,cAAA,OAAKC,UAAU,SACbF,EAAAL,EAAAM,cAAA,oCACAD,EAAAL,EAAAM,cAAA,OAAKC,UAAW,UACdF,EAAAL,EAAAM,cAAA,qBACAD,EAAAL,EAAAM,cAAA,SAAOC,UAAW,QAASI,SAAU,SAAAC,GAAK,OAAIK,EAAKJ,SAAS,CAAEX,KAAMU,EAAME,OAAOC,SAAUA,MAAOpB,KAAKI,MAAMG,OAC7GG,EAAAL,EAAAM,cAAA,sBACAD,EAAAL,EAAAM,cAAA,SAAOC,UAAW,QAASI,SAAU,SAAAC,GAAK,OAAIK,EAAKJ,SAAS,CAAEV,MAAOS,EAAME,OAAOC,SAAUA,MAAOpB,KAAKI,MAAMI,QAC9GE,EAAAL,EAAAM,cAAA,uBACAD,EAAAL,EAAAM,cAAA,SAAOC,UAAW,QAASI,SAAU,SAAAC,GAAK,OAAIK,EAAKJ,SAAS,CAAET,OAAQQ,EAAME,OAAOC,SAAUA,MAAOpB,KAAKI,MAAMK,UAEhHT,KAAKuB,+FAKuB,IAAAC,EAAAxB,KAC3ByB,EAAOzB,KAAK0B,8BAElB,OACEhB,EAAAL,EAAAM,cAAA,aACED,EAAAL,EAAAM,cAAA,aACAD,EAAAL,EAAAM,cAAA,UACED,EAAAL,EAAAM,cAAA,eACAD,EAAAL,EAAAM,cAAA,gBACAD,EAAAL,EAAAM,cAAA,gBACAD,EAAAL,EAAAM,cAAA,kBAGFD,EAAAL,EAAAM,cAAA,aACCc,EAAKE,IAAI,SAAAC,GAAG,OAAIJ,EAAKK,wBAAwBD,EAAKA,EAAIE,IAAML,EAAKM,OAAS,mDAM7D,IAAAC,EAAAhC,KACZyB,EAAOzB,KAAKiC,sBAElB,OAAKjC,KAAKkC,WAKRxB,EAAAL,EAAAM,cAAA,aACED,EAAAL,EAAAM,cAAA,aACAD,EAAAL,EAAAM,cAAA,UACED,EAAAL,EAAAM,cAAA,eACAD,EAAAL,EAAAM,cAAA,gBACAD,EAAAL,EAAAM,cAAA,iBACAD,EAAAL,EAAAM,cAAA,gBACAD,EAAAL,EAAAM,cAAA,iBACAD,EAAAL,EAAAM,cAAA,gBACAD,EAAAL,EAAAM,cAAA,gBACAD,EAAAL,EAAAM,cAAA,eACAD,EAAAL,EAAAM,cAAA,iBAGFD,EAAAL,EAAAM,cAAA,aACCc,EAAKE,IAAI,SAAAC,GAAG,OAAII,EAAKG,gBAAgBP,OAnBjClB,EAAAL,EAAAM,cAAA,SAAOC,UAAW,oBAAlB,yDAyBKgB,GACd,OACElB,EAAAL,EAAAM,cAAA,MAAIyB,IAAKR,EAAIE,GACXpB,EAAAL,EAAAM,cAAA,UAAKiB,EAAIE,GACTpB,EAAAL,EAAAM,cAAA,UAAKiB,EAAIS,GACT3B,EAAAL,EAAAM,cAAA,UAAKiB,EAAIU,OACT5B,EAAAL,EAAAM,cAAA,UAAKiB,EAAIW,GACT7B,EAAAL,EAAAM,cAAA,UAAKiB,EAAIY,OACT9B,EAAAL,EAAAM,cAAA,UAAKiB,EAAIvB,GACTK,EAAAL,EAAAM,cAAA,UAAKiB,EAAItB,GACTI,EAAAL,EAAAM,cAAA,UAAKiB,EAAIa,GACT/B,EAAAL,EAAAM,cAAA,UAAKiB,EAAIc,oDAKSd,EAAKe,GAC3B,OACEjC,EAAAL,EAAAM,cAAA,MAAIyB,IAAKR,EAAIE,GACXpB,EAAAL,EAAAM,cAAA,WAAMgC,GAAUf,EAAIE,GACpBpB,EAAAL,EAAAM,cAAA,MAAIC,UAAW+B,EAAS,WAAa,IAAKf,EAAIgB,GAC9ClC,EAAAL,EAAAM,cAAA,WAAMgC,GAAUf,EAAIvB,GACpBK,EAAAL,EAAAM,cAAA,WAAMgC,GAAUf,EAAIiB,uCAMxB,IAAMxC,EAAIyC,OAAO9C,KAAKI,MAAMC,GACtBC,EAAIwC,OAAO9C,KAAKI,MAAME,GAE5B,OAASyC,MAAM1C,KAAO0C,MAAMzC,IAAQD,EAAI,GAAKC,EAAI,gDAwBjD,IApBA,IAAM0C,EAAeF,OAAO9C,KAAKI,MAAMC,GACjC4C,EAAgBH,OAAO9C,KAAKI,MAAME,GAElCD,EAAI6C,KAAKC,IAAIH,EAAcC,GAC3B3C,EAAI4C,KAAKE,IAAIJ,EAAcC,GAc3BxB,EAAO,CAZI,CACfK,EAAG,EACHzB,EAAGA,EACHC,EAAGA,EACHmC,EAAGS,KAAKG,MAAMhD,EAAIC,GAClBoC,EAAGrC,EAAIC,EACPiC,EAAG,EACHC,MAAO,EACPH,EAAG,EACHC,MAAO,IAKFgB,IAAEC,KAAK9B,GAAMiB,EAAI,GAAG,CACzB,IAAMc,EAAcF,IAAEC,KAAK9B,GAGrBgC,EAAOD,EAAYlD,EACnBoD,EAAOF,EAAYd,EACnBiB,EAAU,CACd7B,EAAG0B,EAAY1B,EAAI,EACnBzB,EAAGoD,EACHnD,EAAGoD,EACHjB,EAAGS,KAAKG,MAAMI,EAAOC,GACrBhB,EAAGe,EAAOC,EACVnB,EAAGiB,EAAYhB,MAASgB,EAAYf,EAAIe,EAAYjB,EACpDC,MAAOgB,EAAYjB,EACnBF,EAAGmB,EAAYlB,MAASkB,EAAYf,EAAIe,EAAYnB,EACpDC,MAAOkB,EAAYnB,GAGrBZ,EAAKmC,KAAKD,GAGZ,OAAOlC,wDAmBP,IAfA,IAAMlB,EAAOuC,OAAO9C,KAAKI,MAAMG,MACzBC,EAAQsC,OAAO9C,KAAKI,MAAMI,OAC1BC,EAASqC,OAAO9C,KAAKI,MAAMK,QAE3BoD,EAAiB7D,KAAK8D,gBAAgBtD,GAAOuD,UAS7CtC,EAAO,CAPI,CACfK,EAAG,EACHc,EAAG,EACHvC,EAAGE,EACHsC,EAAGgB,EAAe,KAKX/B,EAAI,EAAGA,EAAI+B,EAAe9B,OAAQD,IAAK,CAC9C,IAAM0B,EAAcF,IAAEC,KAAK9B,GAErBuC,EAAOR,EAAY1B,EAAI,EAGvB6B,EAAU,CACd7B,EAAGkC,EACHpB,EAJ6B,IAAlBY,EAAYX,EAAYW,EAAYZ,EAAIY,EAAYnD,EAAKI,EAAU+C,EAAYZ,EAK1FvC,EAJYmD,EAAYnD,EAAImD,EAAYnD,EAAKI,EAK7CoC,EAAGgB,EAAeG,IAGpBvC,EAAKmC,KAAKD,GAGZ,OAAOlC,0CAGOwC,GAId,IAHA,IAAMC,GAAYD,IAAQ,GAAGE,SAAS,GAChCC,EAAW,GAERtC,EAAI,EAAGA,EAAIoC,EAASnC,OAAQD,IACnCsC,EAASR,KAAKd,OAAOoB,EAASG,OAAOvC,KAEvC,OAAOsC,SAnOOE,aCClBC,IAASC,OAAO9D,EAAAL,EAAAM,cAAC8D,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.b5af8744.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport _ from 'lodash'\n\nclass App extends Component {\n\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      a: '3',\n      b: '2',\n      base: '12',\n      power: '33',\n      modulo: '67'\n    }\n  }\n\n  render() {\n    return (\n      <div className={'container'}>\n        <div className=\"app\">\n          {this.renderEuclid()}\n          {this.renderModularMultiplication()}\n        </div>\n      </div>\n    );\n  }\n\n  renderEuclid() {\n    return (\n      <div className=\"panel\">\n        <h1>Extended Euclid algorithm</h1>\n        <div className={'inputs'}>\n          <label>first integer</label>\n          <input className={'input'} onChange={event => this.setState({ a: event.target.value })} value={this.state.a} />\n          <label>second integer</label>\n          <input className={'input'} onChange={event => this.setState({ b: event.target.value })} value={this.state.b} />\n        </div>\n        {this.renderEuclidTable()}\n      </div>\n    )\n  }\n\n  renderModularMultiplication() {\n    return (\n      <div className=\"panel\">\n        <h1>Modular exponentiation</h1>\n        <div className={'inputs'}>\n          <label>base</label>\n          <input className={'input'} onChange={event => this.setState({ base: event.target.value })} value={this.state.base} />\n          <label>power</label>\n          <input className={'input'} onChange={event => this.setState({ power: event.target.value })} value={this.state.power} />\n          <label>modulo</label>\n          <input className={'input'} onChange={event => this.setState({ modulo: event.target.value })} value={this.state.modulo} />\n        </div>\n        {this.renderModularMultiplicationTable()}\n      </div>\n    )\n  }\n\n  renderModularMultiplicationTable() {\n    const rows = this.calculateExponentiationRows();\n\n    return (\n      <table>\n        <thead>\n        <tr>\n          <th>i</th>\n          <th>xi</th>\n          <th>ai</th>\n          <th>ti</th>\n        </tr>\n        </thead>\n        <tbody>\n        {rows.map(row => this.renderExponentiationRow(row, row.i === rows.length - 1))}\n        </tbody>\n      </table>\n    )\n  }\n\n  renderEuclidTable() {\n    const rows = this.calculateEuclidRows();\n\n    if (!this.allLegit()) {\n      return <label className={'validation-error'}>bad arguments</label>\n    }\n\n    return (\n      <table>\n        <thead>\n        <tr>\n          <th>i</th>\n          <th>ui</th>\n          <th>ui`</th>\n          <th>vi</th>\n          <th>vi`</th>\n          <th>ai</th>\n          <th>bi</th>\n          <th>q</th>\n          <th>r</th>\n        </tr>\n        </thead>\n        <tbody>\n        {rows.map(row => this.renderEuclidRow(row))}\n        </tbody>\n      </table>\n    )\n  }\n\n  renderEuclidRow(row) {\n    return (\n      <tr key={row.i}>\n        <td>{row.i}</td>\n        <td>{row.u}</td>\n        <td>{row.uPrim}</td>\n        <td>{row.v}</td>\n        <td>{row.vPrim}</td>\n        <td>{row.a}</td>\n        <td>{row.b}</td>\n        <td>{row.q}</td>\n        <td>{row.r}</td>\n      </tr>\n    );\n  }\n\n  renderExponentiationRow(row, isLast) {\n    return (\n      <tr key={row.i}>\n        <td>{!isLast && row.i}</td>\n        <td className={isLast ? 'enhanced' : ''}>{row.x}</td>\n        <td>{!isLast && row.a}</td>\n        <td>{!isLast && row.t}</td>\n      </tr>\n    );\n  }\n\n  allLegit() {\n    const a = Number(this.state.a);\n    const b = Number(this.state.b);\n\n    return (!isNaN(a) && !isNaN(b)) && (a > 0 && b > 0)\n  }\n\n  calculateEuclidRows() {\n    const firstInteger = Number(this.state.a);\n    const secondInteger = Number(this.state.b);\n\n    const a = Math.max(firstInteger, secondInteger);\n    const b = Math.min(firstInteger, secondInteger);\n\n    const firstRow = {\n      i: 0,\n      a: a,\n      b: b,\n      q: Math.floor(a / b),\n      r: a % b,\n      v: 1,\n      vPrim: 0,\n      u: 0,\n      uPrim: 1\n    };\n\n    const rows = [firstRow];\n\n    while (_.last(rows).r > 0) {\n      const previousRow = _.last(rows);\n\n\n      const newA = previousRow.b;\n      const newB = previousRow.r;\n      const nextRow = {\n        i: previousRow.i + 1,\n        a: newA,\n        b: newB,\n        q: Math.floor(newA / newB),\n        r: newA % newB,\n        v: previousRow.vPrim - (previousRow.q * previousRow.v),\n        vPrim: previousRow.v,\n        u: previousRow.uPrim - (previousRow.q * previousRow.u),\n        uPrim: previousRow.u\n      };\n\n      rows.push(nextRow);\n    }\n\n    return rows;\n  }\n\n  calculateExponentiationRows() {\n    const base = Number(this.state.base);\n    const power = Number(this.state.power);\n    const modulo = Number(this.state.modulo);\n\n    const lsbBinaryPower = this.decimalToBinary(power).reverse();\n\n    const firstRow = {\n      i: 0,\n      x: 1,\n      a: base,\n      t: lsbBinaryPower[0],\n    };\n\n    const rows = [firstRow];\n\n    for (let i = 0; i < lsbBinaryPower.length; i++) {\n      const previousRow = _.last(rows);\n\n      const newI = previousRow.i + 1;\n      const newX = previousRow.t === 1 ? ((previousRow.x * previousRow.a) % modulo) : previousRow.x;\n      const newA = (previousRow.a * previousRow.a) % modulo;\n      const nextRow = {\n        i: newI,\n        x: newX,\n        a: newA,\n        t: lsbBinaryPower[newI],\n      };\n\n      rows.push(nextRow);\n    }\n\n    return rows;\n  }\n\n  decimalToBinary(dec) {\n    const asString = (dec >>> 0).toString(2);\n    const asBinary = [];\n\n    for (let i = 0; i < asString.length; i++) {\n      asBinary.push(Number(asString.charAt(i)))\n    }\n    return asBinary;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}